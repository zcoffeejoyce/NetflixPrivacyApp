Secret Values Revealed!!

Client: 58
Secret: 76db555888e87b2c10469465d915227e698ab76d
Value: espresso
___
Client: 3333
Secret: 1f6ccd2be75f1cc94a22a773eea8f8aeb5c68217
Value: pizza
___
Client: 40001
Secret: e5e9fa1ba31ecd1ae84f75caaa474f3a663f05f4
Value: secret
___
Client: 50000
Secret: 17bfab9228b6064e555c408e6372332e93a0a33a
Value: kale


EXPLOITABLE SECRETS IDENTIFICATION
As part of the batch API call, the request would return a message that referenced the 
parameter being accessed (batch), as well as the parameter value it was running on. When
an exploitable client was found, the attack string would be executed (cat /etc/secret),
with the secret value replacing the attack string text in the resulting response. Thus,
I checked each response to see if the batch parameter value (value=the attack string) had
changed. If it was different from the string I sent in, I could extract the secret value
from the end of the response string.


SECRET VALUE LOOKUP METHOD
1. Looking at the secrets obtained from each client, it looked like they were hex encoded,
similar to the hex encodings of the header signatures I had to create.
- I also noticed that the secrets were static and never changed during multiple runs
- I also noticed that the length of the secrets were all the same - 40 characters

2. From there, an internet search for "Hashes with 40 characters" revealed the SHA-1
algorithm was most likely used to encode these secrets.

3. Since hashing is a one way function, the only way to decrypt is to compare known
encrypted words/phrases. I did not attempt to do this as part of my code for performance
considerations.

4. I was able to use https://md5decrypt.net/en/Sha1/ to find the values of all
client secrets.